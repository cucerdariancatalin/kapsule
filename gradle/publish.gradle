apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'org.jetbrains.dokka'

ext {
    isReleaseVersion = !version.endsWith("-SNAPSHOT")
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from dokka
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
    includes = ['dokka-module.md', 'dokka-package.md']

    linkMapping {
        dir = "src/main/kotlin"
        url = "https://github.com/gouline/kapsule/blob/master/${project.name}/src/main/kotlin"
        suffix = "#L"
    }
}

artifacts {
    archives sourcesJar, javadocJar
}

def pomConfig = {
    licenses {
        license {
            name project['publish.license.name']
            url project['publish.license.url']
        }
    }
    developers {
        developer {
            id project['publish.developer.id']
            name project['publish.developer.name']
        }
    }
    scm {
        connection "scm:git:${project['publish.vcsHttp']}"
        developerConnection "scm:git:${project['publish.vcsSsh']}"
        url project['publish.vcsUrl']
    }
}

if (hasProperty('ossrhUsername') && hasProperty('ossrhPassword')) {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                groupId project['publish.groupId']
                artifactId project['publish.artifactId']
                version project['publish.version']
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', project['publish.name'])
                    root.appendNode('description', project['publish.description'])
                    root.appendNode('url', project['publish.url'])
                    root.children().last() + pomConfig
                }
            }
        }

        repositories {
            maven {
                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username project['ossrhUsername']
                    password project['ossrhPassword']
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }

    publish.dependsOn {
        if (!rootProject.hasProperty('ossrhUsername') || !rootProject.hasProperty('ossrhPassword')) {
            throw new IllegalArgumentException("Properties 'ossrhUsername' and 'ossrhPassword'" +
                    " must be defined to access the Sonatype repository!")
        }
    }
}
