apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'org.jetbrains.dokka'

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from dokka
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    required { gradle.taskGraph.hasTask(tasks.uploadArchives) }
    sign configurations.archives
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
    includes = ['dokka-module.md', 'dokka-package.md']

    linkMapping {
        dir = "src/main/kotlin"
        url = "https://github.com/traversals/kapsule/blob/master/${project.name}/src/main/kotlin"
        suffix = "#L"
    }
}

if (hasProperty('ossrh.username') && hasProperty('ossrh.password')) {
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = property('publish.groupId')
                pom.artifactId = property('publish.artifactId')
                pom.version = property('publish.version')

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: property('ossrh.username'), password: property('ossrh.password'))
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: property('ossrh.username'), password: property('ossrh.password'))
                }

                pom.project {
                    name property('pom.name')
                    description property('pom.description')
                    packaging 'jar'
                    url property('pom.url')

                    licenses {
                        license {
                            name property('pom.licence.name')
                            url property('pom.licence.url')
                        }
                    }

                    developers {
                        developer {
                            id property('pom.developer.id')
                            name property('pom.developer.name')
                        }
                    }

                    scm {
                        url property('pom.scm.url')
                        connection property('pom.scm.connection')
                        developerConnection property('pom.scm.developerConnection')
                        tag 'HEAD'
                    }
                }
            }
        }
    }
}
